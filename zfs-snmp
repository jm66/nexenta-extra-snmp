#!/usr/bin/python

BASE_OID = '.1.3.6.1.4.1.25359.1'

import sys, commands, re, snmpresponse
import simplejson as json


def zfs_arc_size():
    return ('gauge', zfs_stats['arc_size']) # KB

def zfs_arc_data():
    return ('gauge', zfs_stats['arc_data']) # KB

def zfs_arc_meta():
    return ('gauge', zfs_stats['arc_meta']) # KB

def zfs_arc_hits():
    return ('counter', zfs_stats['arc_hits']) # 32 bit counter

def zfs_arc_misses():
    return ('counter', zfs_stats['arc_misses']) # 32 bit counter

def zfs_arc_c():
    return ('gauge', zfs_stats['arc_c']) # KB

def zfs_arc_p():
    return ('gauge', zfs_stats['arc_p']) # KB  

def zfs_read():
    return ('counter', zfs_stats['read']) # 32 bit KB counter

def zfs_readdir():
    return ('counter', zfs_stats['readdir']) # 32 bit KB counter

def zfs_write():
    return ('counter', zfs_stats['write']) # 32 bit KB counter

def zfs_l2arc_hits():
    return ('counter', zfs_stats['l2arc_hits']) # 32 bit counter

def zfs_l2arc_misses():
    return ('counter', zfs_stats['l2arc_misses']) # 32 bit counter

def zfs_l2arc_write():
    return ('counter', zfs_stats['l2arc_write']) # 32 bit KB counter

def zfs_l2arc_read():
    return ('counter', zfs_stats['l2arc_read']) # 32 bit KB counter

# nymnetworks     OBJECT IDENTIFIER ::= {enterprises 25359}
# zfs             OBJECT IDENTIFIER ::= {nymnetworks 1}
# fs              OBJECT IDENTIFIER ::= {zfs 1}
# arc             OBJECT IDENTIFIER ::= {zfs 2}
# l2arc           OBJECT IDENTIFIER ::= {zfs 3}
# io              OBJECT IDENTIFIER ::= {zfs 4}
# vols            OBJECT IDENTIFIER ::= {zfs 5}

zfs_stats_fn = "/tmp/zfs_stats.snmp.cache"
zvols_fn = "/tmp/zvols_full.snmp.cache"
zpools_fn = "/tmp/zpools_health.snmp.cache"
zfsfs_fn = "/tmp/zfss_full.snmp.cache"

zpools = json.load(open(zpools_fn))
zvols = json.load(open(zvols_fn))
zfs_stats = json.load(open(zfs_stats_fn))
zfsfs = json.load(open(zfsfs_fn))

result = [
    (BASE_OID + '.2.1.0', zfs_arc_size()),
    (BASE_OID + '.2.2.0', zfs_arc_meta()),
    (BASE_OID + '.2.3.0', zfs_arc_data()),
    (BASE_OID + '.2.4.0', zfs_arc_hits()),
    (BASE_OID + '.2.5.0', zfs_arc_misses()),
    (BASE_OID + '.2.6.0', zfs_arc_c()),
    (BASE_OID + '.2.7.0', zfs_arc_p()),

    (BASE_OID + '.3.1.0', zfs_l2arc_hits()),
    (BASE_OID + '.3.2.0', zfs_l2arc_misses()),
    (BASE_OID + '.3.3.0', zfs_l2arc_read()),
    (BASE_OID + '.3.4.0', zfs_l2arc_write()),

    (BASE_OID + '.4.1.0', zfs_read()),
    (BASE_OID + '.4.2.0', zfs_readdir()),
    (BASE_OID + '.4.3.0', zfs_write()),
]

i = 1
for p, h in zpools:
    result.append((BASE_OID + '.1.1.' + str(i), ('string', zfs_stats['pools'][p]['name'])))
    result.append((BASE_OID + '.1.4.' + str(i), ('integer', zfs_stats['pools'][p]['health'])))
    result.append((BASE_OID + '.1.12.' + str(i), ('gauge', zfs_stats['pools'][p]['avail'])))
    result.append((BASE_OID + '.1.13.' + str(i), ('gauge', zfs_stats['pools'][p]['used'])))
    result.append((BASE_OID + '.1.14.' + str(i), ('gauge', zfs_stats['pools'][p]['size'])))
    i += 1

i = 1
for v in zvols:
    if len(v) < 1: break
    result.append((BASE_OID + '.5.1.' + str(i), ('string', zfs_stats['vols'][v]['name'])))
    result.append((BASE_OID + '.5.12.' + str(i), ('gauge', zfs_stats['vols'][v]['avail'])))
    result.append((BASE_OID + '.5.13.' + str(i), ('gauge', zfs_stats['vols'][v]['used'])))
    result.append((BASE_OID + '.5.14.' + str(i), ('gauge', zfs_stats['vols'][v]['size'])))
    i += 1

i=1
for f in zfsfs:
    result.append((BASE_OID + '.6.1.' + str(i), ('string', zfs_stats['fss'][f]['name'])))
    result.append((BASE_OID + '.6.12.' + str(i), ('gauge', zfs_stats['fss'][f]['avail'])))
    result.append((BASE_OID + '.6.13.' + str(i), ('gauge', zfs_stats['fss'][f]['used'])))
    result.append((BASE_OID + '.6.14.' + str(i), ('gauge', zfs_stats['fss'][f]['size'])))
    i += 1

operation = sys.argv[1]
req_oid = sys.argv[2]

snmpresponse.respond_to(operation, req_oid, result)
