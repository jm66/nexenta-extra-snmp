#!/usr/bin/env python

from tools import json
from tools.configuration import IOSTAT_BASE_OID as BASE_OID
from tools.configuration import IOSTAT_CACHE_FILE, POLLING_INTERVAL
import snmp_passpersist as snmp


def update_data():
    with open(IOSTAT_CACHE_FILE) as cache_file:
        iostat_json = json.load(cache_file)
        # Generating a SNMP data list
        for io_device in iostat_json:
            oid = pp.encode(io_device['device'])
            pp.add_str('.'.join(['1', '1', oid]), io_device['device'])
            pp.add_gau('.'.join(['1', '2', oid]), int(io_device['reads_ps']))
            pp.add_gau('.'.join(['1', '3', oid]), int(io_device['writes_ps']))
            pp.add_gau('.'.join(['1', '4', oid]), int(io_device['KB_read_ps']))
            pp.add_gau('.'.join(['1', '5', oid]), int(io_device['KB_written_ps']))
            pp.add_gau('.'.join(['1', '6', oid]), int(io_device['wait']))
            pp.add_gau('.'.join(['1', '7', oid]), int(io_device['actv']))
            pp.add_gau('.'.join(['1', '8', oid]), int(io_device['wsvc_t']))
            pp.add_gau('.'.join(['1', '9', oid]), int(io_device['asvc_t']))
            pp.add_gau('.'.join(['1', '10', oid]), int(io_device['wait_pct']))
            pp.add_gau('.'.join(['1', '11', oid]), int(io_device['busy_pct']))


def main():
    global pp

    pp = snmp.PassPersist(BASE_OID)
    pp.start(update_data, POLLING_INTERVAL)

    return

# Start program
if __name__ == "__main__":
    main()
