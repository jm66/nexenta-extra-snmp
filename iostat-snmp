#!/usr/bin/env python

from tools import json
from tools.configuration import IOSTAT_BASE_OID as BASE_OID
from tools.configuration import IOSTAT_CACHE_FILE, POLLING_INTERVAL
import snmp_passpersist as snmp


def update_data():
    with open(IOSTAT_CACHE_FILE) as cache_file:
        iostat_json = json.load(cache_file)
        # Generating a SNMP data list
        for io_device in iostat_json:
            oid = pp.encode(io_device['device'])
            pp.add_str(oid + '.1', io_device['device'])
            pp.add_str(oid + '.2', int(io_device['reads_ps']))
            pp.add_gau(oid + '.3', int(io_device['writes_ps']))
            pp.add_gau(oid + '.4', int(io_device['KB_read_ps']))
            pp.add_gau(oid + '.5', int(io_device['KB_written_ps']))
            pp.add_gau(oid + '.6', int(io_device['wait']))
            pp.add_gau(oid + '.7', int(io_device['actv']))
            pp.add_gau(oid + '.8', int(io_device['wsvc_t']))
            pp.add_gau(oid + '.9', int(io_device['asvc_t']))
            pp.add_gau(oid + '.10', int(io_device['wait_pct']))
            pp.add_gau(oid + '.11', int(io_device['busy_pct']))


def main():
    global pp

    pp = snmp.PassPersist(BASE_OID)
    pp.start(update_data, POLLING_INTERVAL)

    return

# Start program
if __name__ == "__main__":
    main()
